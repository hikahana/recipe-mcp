/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.
  To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.

  Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 * OpenAPI spec version: 1.0.0
 */

import {
  McpServer
} from '@modelcontextprotocol/sdk/server/mcp.js';
  
import {
  StdioServerTransport
} from '@modelcontextprotocol/sdk/server/stdio.js';  

import {
  getFoodHandler,
  getFoodsHandler,
  postFoodsHandler,
  getFoodsListHandler,
  postFoodsListHandler,
  getFoodsSearchHandler,
  postFoodsSearchHandler,
  getJsonSpecHandler,
  getYamlSpecHandler
} from './handlers';
import {
  getFoodParams,
  getFoodQueryParams,
  getFoodsQueryParams,
  postFoodsBody,
  getFoodsListQueryParams,
  postFoodsListBody,
  getFoodsSearchQueryParams,
  postFoodsSearchBody
} from './tool-schemas.zod';

const server = new McpServer({
  name: 'foodDataCentralAPIServer',
  version: '1.0.0',
});


server.tool(
  'getFood',
  'Fetches details for one food item by FDC ID',
  {
    pathParams: getFoodParams,
    queryParams: getFoodQueryParams
  },
  getFoodHandler
);

server.tool(
  'getFoods',
  'Fetches details for multiple food items using input FDC IDs',
  {
    queryParams: getFoodsQueryParams
  },
  getFoodsHandler
);

server.tool(
  'postFoods',
  'Fetches details for multiple food items using input FDC IDs',
  {
    bodyParams: postFoodsBody
  },
  postFoodsHandler
);

server.tool(
  'getFoodsList',
  'Returns a paged list of foods, in the 'abridged' format',
  {
    queryParams: getFoodsListQueryParams
  },
  getFoodsListHandler
);

server.tool(
  'postFoodsList',
  'Returns a paged list of foods, in the 'abridged' format',
  {
    bodyParams: postFoodsListBody
  },
  postFoodsListHandler
);

server.tool(
  'getFoodsSearch',
  'Returns a list of foods that matched search (query) keywords',
  {
    queryParams: getFoodsSearchQueryParams
  },
  getFoodsSearchHandler
);

server.tool(
  'postFoodsSearch',
  'Returns a list of foods that matched search (query) keywords',
  {
    bodyParams: postFoodsSearchBody
  },
  postFoodsSearchHandler
);

server.tool(
  'getJsonSpec',
  'Returns this documentation in JSON format',
  getJsonSpecHandler
);

server.tool(
  'getYamlSpec',
  'Returns this documentation in JSON format',
  getYamlSpecHandler
);

const transport = new StdioServerTransport();

server.connect(transport).then(() => {
  console.error('MCP server running on stdio');
}).catch(console.error);
