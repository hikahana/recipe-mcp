/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.
  To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.

  Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 * OpenAPI spec version: 1.0.0
 */

import { GetFood200,
GetFoodParams,
GetFoods200Item,
GetFoodsParams,
PostFoods200Item,
FoodsCriteria,
AbridgedFoodItem,
GetFoodsListParams,
FoodListCriteria,
SearchResult,
GetFoodsSearchParams,
FoodSearchCriteria } from './http-schemas';

export type getFoodResponse200 = {
  data: GetFood200
  status: 200
}

export type getFoodResponse400 = {
  data: void
  status: 400
}
    
export type getFoodResponseComposite = getFoodResponse200 | getFoodResponse400;
    
export type getFoodResponse = getFoodResponseComposite & {
  headers: Headers;
}

export const getGetFoodUrl = (fdcId: string,
    params?: GetFoodParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.nal.usda.gov/fdc/v1/food/${fdcId}?${stringifiedParams}` : `https://api.nal.usda.gov/fdc/v1/food/${fdcId}`
}

export const getFood = async (fdcId: string,
    params?: GetFoodParams, options?: RequestInit): Promise<getFoodResponse> => {
  
  const res = await fetch(getGetFoodUrl(fdcId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getFoodResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getFoodResponse
}



export type getFoodsResponse200 = {
  data: GetFoods200Item[]
  status: 200
}

export type getFoodsResponse400 = {
  data: void
  status: 400
}
    
export type getFoodsResponseComposite = getFoodsResponse200 | getFoodsResponse400;
    
export type getFoodsResponse = getFoodsResponseComposite & {
  headers: Headers;
}

export const getGetFoodsUrl = (params: GetFoodsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.nal.usda.gov/fdc/v1/foods?${stringifiedParams}` : `https://api.nal.usda.gov/fdc/v1/foods`
}

export const getFoods = async (params: GetFoodsParams, options?: RequestInit): Promise<getFoodsResponse> => {
  
  const res = await fetch(getGetFoodsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getFoodsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getFoodsResponse
}



export type postFoodsResponse200 = {
  data: PostFoods200Item[]
  status: 200
}

export type postFoodsResponse400 = {
  data: void
  status: 400
}
    
export type postFoodsResponseComposite = postFoodsResponse200 | postFoodsResponse400;
    
export type postFoodsResponse = postFoodsResponseComposite & {
  headers: Headers;
}

export const getPostFoodsUrl = () => {


  

  return `https://api.nal.usda.gov/fdc/v1/foods`
}

export const postFoods = async (foodsCriteria: FoodsCriteria, options?: RequestInit): Promise<postFoodsResponse> => {
  
  const res = await fetch(getPostFoodsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      foodsCriteria,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postFoodsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postFoodsResponse
}



export type getFoodsListResponse200 = {
  data: AbridgedFoodItem[]
  status: 200
}

export type getFoodsListResponse400 = {
  data: void
  status: 400
}
    
export type getFoodsListResponseComposite = getFoodsListResponse200 | getFoodsListResponse400;
    
export type getFoodsListResponse = getFoodsListResponseComposite & {
  headers: Headers;
}

export const getGetFoodsListUrl = (params?: GetFoodsListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.nal.usda.gov/fdc/v1/foods/list?${stringifiedParams}` : `https://api.nal.usda.gov/fdc/v1/foods/list`
}

export const getFoodsList = async (params?: GetFoodsListParams, options?: RequestInit): Promise<getFoodsListResponse> => {
  
  const res = await fetch(getGetFoodsListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getFoodsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getFoodsListResponse
}



export type postFoodsListResponse200 = {
  data: AbridgedFoodItem[]
  status: 200
}

export type postFoodsListResponse400 = {
  data: void
  status: 400
}
    
export type postFoodsListResponseComposite = postFoodsListResponse200 | postFoodsListResponse400;
    
export type postFoodsListResponse = postFoodsListResponseComposite & {
  headers: Headers;
}

export const getPostFoodsListUrl = () => {


  

  return `https://api.nal.usda.gov/fdc/v1/foods/list`
}

export const postFoodsList = async (foodListCriteria: FoodListCriteria, options?: RequestInit): Promise<postFoodsListResponse> => {
  
  const res = await fetch(getPostFoodsListUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      foodListCriteria,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postFoodsListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postFoodsListResponse
}



export type getFoodsSearchResponse200 = {
  data: SearchResult[]
  status: 200
}

export type getFoodsSearchResponse400 = {
  data: void
  status: 400
}
    
export type getFoodsSearchResponseComposite = getFoodsSearchResponse200 | getFoodsSearchResponse400;
    
export type getFoodsSearchResponse = getFoodsSearchResponseComposite & {
  headers: Headers;
}

export const getGetFoodsSearchUrl = (params: GetFoodsSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.nal.usda.gov/fdc/v1/foods/search?${stringifiedParams}` : `https://api.nal.usda.gov/fdc/v1/foods/search`
}

export const getFoodsSearch = async (params: GetFoodsSearchParams, options?: RequestInit): Promise<getFoodsSearchResponse> => {
  
  const res = await fetch(getGetFoodsSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getFoodsSearchResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getFoodsSearchResponse
}



export type postFoodsSearchResponse200 = {
  data: SearchResult[]
  status: 200
}

export type postFoodsSearchResponse400 = {
  data: void
  status: 400
}
    
export type postFoodsSearchResponseComposite = postFoodsSearchResponse200 | postFoodsSearchResponse400;
    
export type postFoodsSearchResponse = postFoodsSearchResponseComposite & {
  headers: Headers;
}

export const getPostFoodsSearchUrl = () => {


  

  return `https://api.nal.usda.gov/fdc/v1/foods/search`
}

export const postFoodsSearch = async (foodSearchCriteria: FoodSearchCriteria, options?: RequestInit): Promise<postFoodsSearchResponse> => {
  
  const res = await fetch(getPostFoodsSearchUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      foodSearchCriteria,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postFoodsSearchResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postFoodsSearchResponse
}



export type getJsonSpecResponseDefault = {
  data: void
  status: number
}
    
export type getJsonSpecResponseComposite = getJsonSpecResponseDefault;
    
export type getJsonSpecResponse = getJsonSpecResponseComposite & {
  headers: Headers;
}

export const getGetJsonSpecUrl = () => {


  

  return `https://api.nal.usda.gov/fdc/v1/json-spec`
}

export const getJsonSpec = async ( options?: RequestInit): Promise<getJsonSpecResponse> => {
  
  const res = await fetch(getGetJsonSpecUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getJsonSpecResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getJsonSpecResponse
}



export type getYamlSpecResponseDefault = {
  data: void
  status: number
}
    
export type getYamlSpecResponseComposite = getYamlSpecResponseDefault;
    
export type getYamlSpecResponse = getYamlSpecResponseComposite & {
  headers: Headers;
}

export const getGetYamlSpecUrl = () => {


  

  return `https://api.nal.usda.gov/fdc/v1/yaml-spec`
}

export const getYamlSpec = async ( options?: RequestInit): Promise<getYamlSpecResponse> => {
  
  const res = await fetch(getGetYamlSpecUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getYamlSpecResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getYamlSpecResponse
}


