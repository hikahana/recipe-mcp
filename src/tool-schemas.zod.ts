/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.
  To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.

  Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod';

export const getFoodParams = zod.object({
  "fdcId": zod.string().describe('FDC id of the food to retrieve')
})

export const getFoodQueryNutrientsMax = 25;


export const getFoodQueryParams = zod.object({
  "format": zod.enum(['abridged', 'full']).optional().describe('Optional. \'abridged\' for an abridged set of elements, \'full\' for all elements (default).'),
  "nutrients": zod.array(zod.number()).min(1).max(getFoodQueryNutrientsMax).optional().describe('Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.')
})

export const getFoodResponse = zod.object({
  "dataType": zod.string(),
  "description": zod.string(),
  "fdcId": zod.number(),
  "foodNutrients": zod.array(zod.object({
  "number": zod.number().optional(),
  "name": zod.string().optional(),
  "amount": zod.number().optional(),
  "unitName": zod.string().optional(),
  "derivationCode": zod.string().optional(),
  "derivationDescription": zod.string().optional()
})).optional(),
  "publicationDate": zod.string().optional(),
  "brandOwner": zod.string().optional().describe('only applies to Branded Foods'),
  "gtinUpc": zod.string().optional().describe('only applies to Branded Foods'),
  "ndbNumber": zod.string().optional().describe('only applies to Foundation and SRLegacy Foods'),
  "foodCode": zod.string().optional().describe('only applies to Survey Foods')
}).or(zod.object({
  "fdcId": zod.number(),
  "availableDate": zod.string().optional(),
  "brandOwner": zod.string().optional(),
  "dataSource": zod.string().optional(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "gtinUpc": zod.string().optional(),
  "householdServingFullText": zod.string().optional(),
  "ingredients": zod.string().optional(),
  "modifiedDate": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "servingSize": zod.number().optional(),
  "servingSizeUnit": zod.string().optional(),
  "brandedFoodCategory": zod.string().optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "foodUpdateLog": zod.array(zod.object({
  "fdcId": zod.number().optional(),
  "availableDate": zod.string().optional(),
  "brandOwner": zod.string().optional(),
  "dataSource": zod.string().optional(),
  "dataType": zod.string().optional(),
  "description": zod.string().optional(),
  "foodClass": zod.string().optional(),
  "gtinUpc": zod.string().optional(),
  "householdServingFullText": zod.string().optional(),
  "ingredients": zod.string().optional(),
  "modifiedDate": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "servingSize": zod.number().optional(),
  "servingSizeUnit": zod.string().optional(),
  "brandedFoodCategory": zod.string().optional(),
  "changes": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "sequenceNumber": zod.number().optional(),
  "value": zod.string().optional(),
  "FoodAttributeType": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
})).optional()
})).optional(),
  "labelNutrients": zod.object({
  "fat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "saturatedFat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "transFat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "cholesterol": zod.object({
  "value": zod.number().optional()
}).optional(),
  "sodium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "carbohydrates": zod.object({
  "value": zod.number().optional()
}).optional(),
  "fiber": zod.object({
  "value": zod.number().optional()
}).optional(),
  "sugars": zod.object({
  "value": zod.number().optional()
}).optional(),
  "protein": zod.object({
  "value": zod.number().optional()
}).optional(),
  "calcium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "iron": zod.object({
  "value": zod.number().optional()
}).optional(),
  "postassium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "calories": zod.object({
  "value": zod.number().optional()
}).optional()
}).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "footNote": zod.string().optional(),
  "isHistoricalReference": zod.boolean().optional(),
  "ndbNumber": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "scientificName": zod.string().optional(),
  "foodCategory": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional(),
  "foodComponents": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "isRefuse": zod.boolean().optional(),
  "minYearAcquired": zod.number().optional(),
  "percentWeight": zod.number().optional()
})).optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "foodPortions": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "minYearAcquired": zod.number().optional(),
  "modifier": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "measureUnit": zod.object({
  "id": zod.number().optional(),
  "abbreviation": zod.string().optional(),
  "name": zod.string().optional()
}).optional()
})).optional(),
  "inputFoods": zod.array(zod.object({
  "id": zod.number().optional(),
  "foodDescription": zod.string().optional(),
  "inputFood": zod.object({
  "fdcId": zod.number(),
  "datatype": zod.string().optional(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
})).optional()
}).optional()
}).describe('applies to Foundation foods. Not all inputFoods will have all fields.')).optional(),
  "nutrientConversionFactors": zod.array(zod.object({
  "type": zod.string().optional(),
  "value": zod.number().optional()
})).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "isHistoricalReference": zod.boolean().optional(),
  "ndbNumber": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "scientificName": zod.string().optional(),
  "foodCategory": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "nutrientConversionFactors": zod.array(zod.object({
  "type": zod.string().optional(),
  "value": zod.number().optional()
})).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "datatype": zod.string().optional(),
  "description": zod.string(),
  "endDate": zod.string().optional(),
  "foodClass": zod.string().optional(),
  "foodCode": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "startDate": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "sequenceNumber": zod.number().optional(),
  "value": zod.string().optional(),
  "FoodAttributeType": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
})).optional(),
  "foodPortions": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "minYearAcquired": zod.number().optional(),
  "modifier": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "measureUnit": zod.object({
  "id": zod.number().optional(),
  "abbreviation": zod.string().optional(),
  "name": zod.string().optional()
}).optional()
})).optional(),
  "inputFoods": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "foodDescription": zod.string().optional(),
  "ingredientCode": zod.number().optional(),
  "ingredientDescription": zod.string().optional(),
  "ingredientWeight": zod.number().optional(),
  "portionCode": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "surveyFlag": zod.number().optional(),
  "unit": zod.string().optional(),
  "inputFood": zod.any().optional(),
  "retentionFactor": zod.object({
  "id": zod.number().optional(),
  "code": zod.number().optional(),
  "description": zod.string().optional()
}).optional()
}).describe('applies to Survey (FNDDS). Not all inputFoods will have all fields.')).optional(),
  "wweiaFoodCategory": zod.object({
  "wweiaFoodCategoryCode": zod.number().optional(),
  "wweiaFoodCategoryDescription": zod.string().optional()
}).optional()
}))


export const getFoodsQueryFdcIdsMax = 20;
export const getFoodsQueryNutrientsMax = 25;


export const getFoodsQueryParams = zod.object({
  "fdcIds": zod.array(zod.string()).min(1).max(getFoodsQueryFdcIdsMax).describe('List of multiple FDC ID\'s. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052).'),
  "format": zod.enum(['abridged', 'full']).optional().describe('Optional. \'abridged\' for an abridged set of elements, \'full\' for all elements (default).'),
  "nutrients": zod.array(zod.number()).min(1).max(getFoodsQueryNutrientsMax).optional().describe('Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.')
})

export const getFoodsResponseItem = zod.object({
  "dataType": zod.string(),
  "description": zod.string(),
  "fdcId": zod.number(),
  "foodNutrients": zod.array(zod.object({
  "number": zod.number().optional(),
  "name": zod.string().optional(),
  "amount": zod.number().optional(),
  "unitName": zod.string().optional(),
  "derivationCode": zod.string().optional(),
  "derivationDescription": zod.string().optional()
})).optional(),
  "publicationDate": zod.string().optional(),
  "brandOwner": zod.string().optional().describe('only applies to Branded Foods'),
  "gtinUpc": zod.string().optional().describe('only applies to Branded Foods'),
  "ndbNumber": zod.string().optional().describe('only applies to Foundation and SRLegacy Foods'),
  "foodCode": zod.string().optional().describe('only applies to Survey Foods')
}).or(zod.object({
  "fdcId": zod.number(),
  "availableDate": zod.string().optional(),
  "brandOwner": zod.string().optional(),
  "dataSource": zod.string().optional(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "gtinUpc": zod.string().optional(),
  "householdServingFullText": zod.string().optional(),
  "ingredients": zod.string().optional(),
  "modifiedDate": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "servingSize": zod.number().optional(),
  "servingSizeUnit": zod.string().optional(),
  "brandedFoodCategory": zod.string().optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "foodUpdateLog": zod.array(zod.object({
  "fdcId": zod.number().optional(),
  "availableDate": zod.string().optional(),
  "brandOwner": zod.string().optional(),
  "dataSource": zod.string().optional(),
  "dataType": zod.string().optional(),
  "description": zod.string().optional(),
  "foodClass": zod.string().optional(),
  "gtinUpc": zod.string().optional(),
  "householdServingFullText": zod.string().optional(),
  "ingredients": zod.string().optional(),
  "modifiedDate": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "servingSize": zod.number().optional(),
  "servingSizeUnit": zod.string().optional(),
  "brandedFoodCategory": zod.string().optional(),
  "changes": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "sequenceNumber": zod.number().optional(),
  "value": zod.string().optional(),
  "FoodAttributeType": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
})).optional()
})).optional(),
  "labelNutrients": zod.object({
  "fat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "saturatedFat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "transFat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "cholesterol": zod.object({
  "value": zod.number().optional()
}).optional(),
  "sodium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "carbohydrates": zod.object({
  "value": zod.number().optional()
}).optional(),
  "fiber": zod.object({
  "value": zod.number().optional()
}).optional(),
  "sugars": zod.object({
  "value": zod.number().optional()
}).optional(),
  "protein": zod.object({
  "value": zod.number().optional()
}).optional(),
  "calcium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "iron": zod.object({
  "value": zod.number().optional()
}).optional(),
  "postassium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "calories": zod.object({
  "value": zod.number().optional()
}).optional()
}).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "footNote": zod.string().optional(),
  "isHistoricalReference": zod.boolean().optional(),
  "ndbNumber": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "scientificName": zod.string().optional(),
  "foodCategory": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional(),
  "foodComponents": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "isRefuse": zod.boolean().optional(),
  "minYearAcquired": zod.number().optional(),
  "percentWeight": zod.number().optional()
})).optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "foodPortions": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "minYearAcquired": zod.number().optional(),
  "modifier": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "measureUnit": zod.object({
  "id": zod.number().optional(),
  "abbreviation": zod.string().optional(),
  "name": zod.string().optional()
}).optional()
})).optional(),
  "inputFoods": zod.array(zod.object({
  "id": zod.number().optional(),
  "foodDescription": zod.string().optional(),
  "inputFood": zod.object({
  "fdcId": zod.number(),
  "datatype": zod.string().optional(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
})).optional()
}).optional()
}).describe('applies to Foundation foods. Not all inputFoods will have all fields.')).optional(),
  "nutrientConversionFactors": zod.array(zod.object({
  "type": zod.string().optional(),
  "value": zod.number().optional()
})).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "isHistoricalReference": zod.boolean().optional(),
  "ndbNumber": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "scientificName": zod.string().optional(),
  "foodCategory": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "nutrientConversionFactors": zod.array(zod.object({
  "type": zod.string().optional(),
  "value": zod.number().optional()
})).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "datatype": zod.string().optional(),
  "description": zod.string(),
  "endDate": zod.string().optional(),
  "foodClass": zod.string().optional(),
  "foodCode": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "startDate": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "sequenceNumber": zod.number().optional(),
  "value": zod.string().optional(),
  "FoodAttributeType": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
})).optional(),
  "foodPortions": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "minYearAcquired": zod.number().optional(),
  "modifier": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "measureUnit": zod.object({
  "id": zod.number().optional(),
  "abbreviation": zod.string().optional(),
  "name": zod.string().optional()
}).optional()
})).optional(),
  "inputFoods": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "foodDescription": zod.string().optional(),
  "ingredientCode": zod.number().optional(),
  "ingredientDescription": zod.string().optional(),
  "ingredientWeight": zod.number().optional(),
  "portionCode": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "surveyFlag": zod.number().optional(),
  "unit": zod.string().optional(),
  "inputFood": zod.any().optional(),
  "retentionFactor": zod.object({
  "id": zod.number().optional(),
  "code": zod.number().optional(),
  "description": zod.string().optional()
}).optional()
}).describe('applies to Survey (FNDDS). Not all inputFoods will have all fields.')).optional(),
  "wweiaFoodCategory": zod.object({
  "wweiaFoodCategoryCode": zod.number().optional(),
  "wweiaFoodCategoryDescription": zod.string().optional()
}).optional()
}))
export const getFoodsResponse = zod.array(getFoodsResponseItem)


export const postFoodsBodyFdcIdsMax = 20;
export const postFoodsBodyNutrientsMax = 25;


export const postFoodsBody = zod.object({
  "fdcIds": zod.array(zod.number()).min(1).max(postFoodsBodyFdcIdsMax).optional().describe('List of multiple FDC ID\'s'),
  "format": zod.enum(['abridged', 'full']).optional().describe('Optional. \'abridged\' for an abridged set of elements, \'full\' for all elements (default).'),
  "nutrients": zod.array(zod.number()).min(1).max(postFoodsBodyNutrientsMax).optional().describe('Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.')
}).describe('JSON for request body of \'foods\' POST request. Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID\'s or ones that are not found are omitted and an empty set is returned if there are no matches.')

export const postFoodsResponseItem = zod.object({
  "dataType": zod.string(),
  "description": zod.string(),
  "fdcId": zod.number(),
  "foodNutrients": zod.array(zod.object({
  "number": zod.number().optional(),
  "name": zod.string().optional(),
  "amount": zod.number().optional(),
  "unitName": zod.string().optional(),
  "derivationCode": zod.string().optional(),
  "derivationDescription": zod.string().optional()
})).optional(),
  "publicationDate": zod.string().optional(),
  "brandOwner": zod.string().optional().describe('only applies to Branded Foods'),
  "gtinUpc": zod.string().optional().describe('only applies to Branded Foods'),
  "ndbNumber": zod.string().optional().describe('only applies to Foundation and SRLegacy Foods'),
  "foodCode": zod.string().optional().describe('only applies to Survey Foods')
}).or(zod.object({
  "fdcId": zod.number(),
  "availableDate": zod.string().optional(),
  "brandOwner": zod.string().optional(),
  "dataSource": zod.string().optional(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "gtinUpc": zod.string().optional(),
  "householdServingFullText": zod.string().optional(),
  "ingredients": zod.string().optional(),
  "modifiedDate": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "servingSize": zod.number().optional(),
  "servingSizeUnit": zod.string().optional(),
  "brandedFoodCategory": zod.string().optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "foodUpdateLog": zod.array(zod.object({
  "fdcId": zod.number().optional(),
  "availableDate": zod.string().optional(),
  "brandOwner": zod.string().optional(),
  "dataSource": zod.string().optional(),
  "dataType": zod.string().optional(),
  "description": zod.string().optional(),
  "foodClass": zod.string().optional(),
  "gtinUpc": zod.string().optional(),
  "householdServingFullText": zod.string().optional(),
  "ingredients": zod.string().optional(),
  "modifiedDate": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "servingSize": zod.number().optional(),
  "servingSizeUnit": zod.string().optional(),
  "brandedFoodCategory": zod.string().optional(),
  "changes": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "sequenceNumber": zod.number().optional(),
  "value": zod.string().optional(),
  "FoodAttributeType": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
})).optional()
})).optional(),
  "labelNutrients": zod.object({
  "fat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "saturatedFat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "transFat": zod.object({
  "value": zod.number().optional()
}).optional(),
  "cholesterol": zod.object({
  "value": zod.number().optional()
}).optional(),
  "sodium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "carbohydrates": zod.object({
  "value": zod.number().optional()
}).optional(),
  "fiber": zod.object({
  "value": zod.number().optional()
}).optional(),
  "sugars": zod.object({
  "value": zod.number().optional()
}).optional(),
  "protein": zod.object({
  "value": zod.number().optional()
}).optional(),
  "calcium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "iron": zod.object({
  "value": zod.number().optional()
}).optional(),
  "postassium": zod.object({
  "value": zod.number().optional()
}).optional(),
  "calories": zod.object({
  "value": zod.number().optional()
}).optional()
}).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "footNote": zod.string().optional(),
  "isHistoricalReference": zod.boolean().optional(),
  "ndbNumber": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "scientificName": zod.string().optional(),
  "foodCategory": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional(),
  "foodComponents": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "isRefuse": zod.boolean().optional(),
  "minYearAcquired": zod.number().optional(),
  "percentWeight": zod.number().optional()
})).optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "foodPortions": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "minYearAcquired": zod.number().optional(),
  "modifier": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "measureUnit": zod.object({
  "id": zod.number().optional(),
  "abbreviation": zod.string().optional(),
  "name": zod.string().optional()
}).optional()
})).optional(),
  "inputFoods": zod.array(zod.object({
  "id": zod.number().optional(),
  "foodDescription": zod.string().optional(),
  "inputFood": zod.object({
  "fdcId": zod.number(),
  "datatype": zod.string().optional(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
})).optional()
}).optional()
}).describe('applies to Foundation foods. Not all inputFoods will have all fields.')).optional(),
  "nutrientConversionFactors": zod.array(zod.object({
  "type": zod.string().optional(),
  "value": zod.number().optional()
})).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "dataType": zod.string(),
  "description": zod.string(),
  "foodClass": zod.string().optional(),
  "isHistoricalReference": zod.boolean().optional(),
  "ndbNumber": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "scientificName": zod.string().optional(),
  "foodCategory": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional(),
  "foodNutrients": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "min": zod.number().optional(),
  "max": zod.number().optional(),
  "median": zod.number().optional(),
  "type": zod.string().optional(),
  "nutrient": zod.object({
  "id": zod.number().optional(),
  "number": zod.string().optional(),
  "name": zod.string().optional(),
  "rank": zod.number().optional(),
  "unitName": zod.string().optional()
}).optional().describe('a food nutrient'),
  "foodNutrientDerivation": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional(),
  "foodNutrientSource": zod.object({
  "id": zod.number().optional(),
  "code": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
}).optional(),
  "nutrientAnalysisDetails": zod.object({
  "subSampleId": zod.number().optional(),
  "amount": zod.number().optional(),
  "nutrientId": zod.number().optional(),
  "labMethodDescription": zod.string().optional(),
  "labMethodOriginalDescription": zod.string().optional(),
  "labMethodLink": zod.string().optional(),
  "labMethodTechnique": zod.string().optional(),
  "nutrientAcquisitionDetails": zod.array(zod.object({
  "sampleUnitId": zod.number().optional(),
  "purchaseDate": zod.string().optional(),
  "storeCity": zod.string().optional(),
  "storeState": zod.string().optional()
})).optional()
}).optional()
})).optional(),
  "nutrientConversionFactors": zod.array(zod.object({
  "type": zod.string().optional(),
  "value": zod.number().optional()
})).optional()
})).or(zod.object({
  "fdcId": zod.number(),
  "datatype": zod.string().optional(),
  "description": zod.string(),
  "endDate": zod.string().optional(),
  "foodClass": zod.string().optional(),
  "foodCode": zod.string().optional(),
  "publicationDate": zod.string().optional(),
  "startDate": zod.string().optional(),
  "foodAttributes": zod.array(zod.object({
  "id": zod.number().optional(),
  "sequenceNumber": zod.number().optional(),
  "value": zod.string().optional(),
  "FoodAttributeType": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional(),
  "description": zod.string().optional()
}).optional()
})).optional(),
  "foodPortions": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "dataPoints": zod.number().optional(),
  "gramWeight": zod.number().optional(),
  "minYearAcquired": zod.number().optional(),
  "modifier": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "measureUnit": zod.object({
  "id": zod.number().optional(),
  "abbreviation": zod.string().optional(),
  "name": zod.string().optional()
}).optional()
})).optional(),
  "inputFoods": zod.array(zod.object({
  "id": zod.number().optional(),
  "amount": zod.number().optional(),
  "foodDescription": zod.string().optional(),
  "ingredientCode": zod.number().optional(),
  "ingredientDescription": zod.string().optional(),
  "ingredientWeight": zod.number().optional(),
  "portionCode": zod.string().optional(),
  "portionDescription": zod.string().optional(),
  "sequenceNumber": zod.number().optional(),
  "surveyFlag": zod.number().optional(),
  "unit": zod.string().optional(),
  "inputFood": zod.any().optional(),
  "retentionFactor": zod.object({
  "id": zod.number().optional(),
  "code": zod.number().optional(),
  "description": zod.string().optional()
}).optional()
}).describe('applies to Survey (FNDDS). Not all inputFoods will have all fields.')).optional(),
  "wweiaFoodCategory": zod.object({
  "wweiaFoodCategoryCode": zod.number().optional(),
  "wweiaFoodCategoryDescription": zod.string().optional()
}).optional()
}))
export const postFoodsResponse = zod.array(postFoodsResponseItem)


export const getFoodsListQueryDataTypeMax = 4;
export const getFoodsListQueryPageSizeMax = 200;


export const getFoodsListQueryParams = zod.object({
  "dataType": zod.array(zod.enum(['Branded', 'Foundation', 'Survey (FNDDS)', 'SR Legacy'])).min(1).max(getFoodsListQueryDataTypeMax).optional().describe('Optional. Filter on a specific data type; specify one or more values in an array.'),
  "pageSize": zod.number().min(1).max(getFoodsListQueryPageSizeMax).optional().describe('Optional. Maximum number of results to return for the current page. Default is 50.'),
  "pageNumber": zod.number().optional().describe('Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)'),
  "sortBy": zod.enum(['dataType.keyword', 'lowercaseDescription.keyword', 'fdcId', 'publishedDate']).optional().describe('Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.'),
  "sortOrder": zod.enum(['asc', 'desc']).optional().describe('Optional. The sort direction for the results. Only applicable if sortBy is specified.')
})

export const getFoodsListResponseItem = zod.object({
  "dataType": zod.string(),
  "description": zod.string(),
  "fdcId": zod.number(),
  "foodNutrients": zod.array(zod.object({
  "number": zod.number().optional(),
  "name": zod.string().optional(),
  "amount": zod.number().optional(),
  "unitName": zod.string().optional(),
  "derivationCode": zod.string().optional(),
  "derivationDescription": zod.string().optional()
})).optional(),
  "publicationDate": zod.string().optional(),
  "brandOwner": zod.string().optional().describe('only applies to Branded Foods'),
  "gtinUpc": zod.string().optional().describe('only applies to Branded Foods'),
  "ndbNumber": zod.string().optional().describe('only applies to Foundation and SRLegacy Foods'),
  "foodCode": zod.string().optional().describe('only applies to Survey Foods')
})
export const getFoodsListResponse = zod.array(getFoodsListResponseItem)


export const postFoodsListBodyDataTypeMax = 4;
export const postFoodsListBodyPageSizeMax = 200;


export const postFoodsListBody = zod.object({
  "dataType": zod.array(zod.enum(['Branded', 'Foundation', 'Survey (FNDDS)', 'SR Legacy'])).min(1).max(postFoodsListBodyDataTypeMax).optional().describe('Optional. Filter on a specific data type; specify one or more values in an array.'),
  "pageSize": zod.number().min(1).max(postFoodsListBodyPageSizeMax).optional().describe('Optional. Maximum number of results to return for the current page. Default is 50.'),
  "pageNumber": zod.number().optional().describe('Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)'),
  "sortBy": zod.enum(['dataType.keyword', 'lowercaseDescription.keyword', 'fdcId', 'publishedDate']).optional().describe('Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.'),
  "sortOrder": zod.enum(['asc', 'desc']).optional().describe('Optional. The sort direction for the results. Only applicable if sortBy is specified.')
}).describe('JSON for request body of \'list\' POST request')

export const postFoodsListResponseItem = zod.object({
  "dataType": zod.string(),
  "description": zod.string(),
  "fdcId": zod.number(),
  "foodNutrients": zod.array(zod.object({
  "number": zod.number().optional(),
  "name": zod.string().optional(),
  "amount": zod.number().optional(),
  "unitName": zod.string().optional(),
  "derivationCode": zod.string().optional(),
  "derivationDescription": zod.string().optional()
})).optional(),
  "publicationDate": zod.string().optional(),
  "brandOwner": zod.string().optional().describe('only applies to Branded Foods'),
  "gtinUpc": zod.string().optional().describe('only applies to Branded Foods'),
  "ndbNumber": zod.string().optional().describe('only applies to Foundation and SRLegacy Foods'),
  "foodCode": zod.string().optional().describe('only applies to Survey Foods')
})
export const postFoodsListResponse = zod.array(postFoodsListResponseItem)


export const getFoodsSearchQueryDataTypeMax = 4;
export const getFoodsSearchQueryPageSizeMax = 200;


export const getFoodsSearchQueryParams = zod.object({
  "query": zod.string().describe('One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)'),
  "dataType": zod.array(zod.enum(['Branded', 'Foundation', 'Survey (FNDDS)', 'SR Legacy'])).min(1).max(getFoodsSearchQueryDataTypeMax).optional().describe('Optional. Filter on a specific data type; specify one or more values in an array.'),
  "pageSize": zod.number().min(1).max(getFoodsSearchQueryPageSizeMax).optional().describe('Optional. Maximum number of results to return for the current page. Default is 50.'),
  "pageNumber": zod.number().optional().describe('Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)'),
  "sortBy": zod.enum(['dataType.keyword', 'lowercaseDescription.keyword', 'fdcId', 'publishedDate']).optional().describe('Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.'),
  "sortOrder": zod.enum(['asc', 'desc']).optional().describe('Optional. The sort direction for the results. Only applicable if sortBy is specified.'),
  "brandOwner": zod.string().optional().describe('Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods')
})

export const getFoodsSearchResponseItem = zod.object({
  "foodSearchCriteria": zod.object({

}).optional().describe('A copy of the criteria that were used in the search.'),
  "totalHits": zod.number().optional().describe('The total number of foods found matching the search criteria.'),
  "currentPage": zod.number().optional().describe('The current page of results being returned.'),
  "totalPages": zod.number().optional().describe('The total number of pages found matching the search criteria.'),
  "foods": zod.array(zod.object({
  "fdcId": zod.number().describe('Unique ID of the food.'),
  "dataType": zod.string().optional().describe('The type of the food data.'),
  "description": zod.string().describe('The description of the food.'),
  "foodCode": zod.string().optional().describe('Any A unique ID identifying the food within FNDDS.'),
  "foodNutrients": zod.array(zod.object({
  "number": zod.number().optional(),
  "name": zod.string().optional(),
  "amount": zod.number().optional(),
  "unitName": zod.string().optional(),
  "derivationCode": zod.string().optional(),
  "derivationDescription": zod.string().optional()
})).optional(),
  "publicationDate": zod.string().optional().describe('Date the item was published to FDC.'),
  "scientificName": zod.string().optional().describe('The scientific name of the food.'),
  "brandOwner": zod.string().optional().describe('Brand owner for the food. Only applies to Branded Foods.'),
  "gtinUpc": zod.string().optional().describe('GTIN or UPC code identifying the food. Only applies to Branded Foods.'),
  "ingredients": zod.string().optional().describe('The list of ingredients (as it appears on the product label). Only applies to Branded Foods.'),
  "ndbNumber": zod.string().optional().describe('Unique number assigned for foundation foods. Only applies to Foundation and SRLegacy Foods.'),
  "additionalDescriptions": zod.string().optional().describe('Any additional descriptions of the food.'),
  "allHighlightFields": zod.string().optional().describe('allHighlightFields'),
  "score": zod.number().optional().describe('Relative score indicating how well the food matches the search criteria.')
})).optional().describe('The list of foods found matching the search criteria. See Food Fields below.')
})
export const getFoodsSearchResponse = zod.array(getFoodsSearchResponseItem)


export const postFoodsSearchBodyDataTypeMax = 4;
export const postFoodsSearchBodyPageSizeMax = 200;


export const postFoodsSearchBody = zod.object({
  "query": zod.string().optional().describe('Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)'),
  "dataType": zod.array(zod.enum(['Branded', 'Foundation', 'Survey (FNDDS)', 'SR Legacy'])).min(1).max(postFoodsSearchBodyDataTypeMax).optional().describe('Optional. Filter on a specific data type; specify one or more values in an array.'),
  "pageSize": zod.number().min(1).max(postFoodsSearchBodyPageSizeMax).optional().describe('Optional. Maximum number of results to return for the current page. Default is 50.'),
  "pageNumber": zod.number().optional().describe('Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)'),
  "sortBy": zod.enum(['dataType.keyword', 'lowercaseDescription.keyword', 'fdcId', 'publishedDate']).optional().describe('Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.'),
  "sortOrder": zod.enum(['asc', 'desc']).optional().describe('Optional. The sort direction for the results. Only applicable if sortBy is specified.'),
  "brandOwner": zod.string().optional().describe('Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods.')
}).describe('JSON for request body of \'search\' POST request')

export const postFoodsSearchResponseItem = zod.object({
  "foodSearchCriteria": zod.object({

}).optional().describe('A copy of the criteria that were used in the search.'),
  "totalHits": zod.number().optional().describe('The total number of foods found matching the search criteria.'),
  "currentPage": zod.number().optional().describe('The current page of results being returned.'),
  "totalPages": zod.number().optional().describe('The total number of pages found matching the search criteria.'),
  "foods": zod.array(zod.object({
  "fdcId": zod.number().describe('Unique ID of the food.'),
  "dataType": zod.string().optional().describe('The type of the food data.'),
  "description": zod.string().describe('The description of the food.'),
  "foodCode": zod.string().optional().describe('Any A unique ID identifying the food within FNDDS.'),
  "foodNutrients": zod.array(zod.object({
  "number": zod.number().optional(),
  "name": zod.string().optional(),
  "amount": zod.number().optional(),
  "unitName": zod.string().optional(),
  "derivationCode": zod.string().optional(),
  "derivationDescription": zod.string().optional()
})).optional(),
  "publicationDate": zod.string().optional().describe('Date the item was published to FDC.'),
  "scientificName": zod.string().optional().describe('The scientific name of the food.'),
  "brandOwner": zod.string().optional().describe('Brand owner for the food. Only applies to Branded Foods.'),
  "gtinUpc": zod.string().optional().describe('GTIN or UPC code identifying the food. Only applies to Branded Foods.'),
  "ingredients": zod.string().optional().describe('The list of ingredients (as it appears on the product label). Only applies to Branded Foods.'),
  "ndbNumber": zod.string().optional().describe('Unique number assigned for foundation foods. Only applies to Foundation and SRLegacy Foods.'),
  "additionalDescriptions": zod.string().optional().describe('Any additional descriptions of the food.'),
  "allHighlightFields": zod.string().optional().describe('allHighlightFields'),
  "score": zod.number().optional().describe('Relative score indicating how well the food matches the search criteria.')
})).optional().describe('The list of foods found matching the search criteria. See Food Fields below.')
})
export const postFoodsSearchResponse = zod.array(postFoodsSearchResponseItem)



