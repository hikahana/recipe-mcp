/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Food Data Central API
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.
  To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.

  Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 * OpenAPI spec version: 1.0.0
 */
import {
  GetFoodParams,
  GetFoodsParams,
  PostFoodsBody,
  GetFoodsListParams,
  PostFoodsListBody,
  GetFoodsSearchParams,
  PostFoodsSearchBody
} from './http-schemas';

import {
  getFood,
  getFoods,
  postFoods,
  getFoodsList,
  postFoodsList,
  getFoodsSearch,
  postFoodsSearch,
  getJsonSpec,
  getYamlSpec
} from './http-client';
  
/**
 * Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
 * @summary Fetches details for one food item by FDC ID
 */

export type getFoodArgs = {
  pathParams: {
    fdcId: string
  };
  queryParams: GetFoodParams;
}

export const getFoodHandler = async (args: getFoodArgs) => {
  const res = await getFood(args.pathParams.fdcId, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.
 * @summary Fetches details for multiple food items using input FDC IDs
 */

export type getFoodsArgs = {
  queryParams: GetFoodsParams;
}

export const getFoodsHandler = async (args: getFoodsArgs) => {
  const res = await getFoods(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.
 * @summary Fetches details for multiple food items using input FDC IDs
 */

export type postFoodsArgs = {
  bodyParams: FoodsCriteria;
}

export const postFoodsHandler = async (args: postFoodsArgs) => {
  const res = await postFoods(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
 * @summary Returns a paged list of foods, in the "abridged" format
 */

export type getFoodsListArgs = {
  queryParams: GetFoodsListParams;
}

export const getFoodsListHandler = async (args: getFoodsListArgs) => {
  const res = await getFoodsList(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
 * @summary Returns a paged list of foods, in the "abridged" format
 */

export type postFoodsListArgs = {
  bodyParams: FoodListCriteria;
}

export const postFoodsListHandler = async (args: postFoodsListArgs) => {
  const res = await postFoodsList(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
 * @summary Returns a list of foods that matched search (query) keywords
 */

export type getFoodsSearchArgs = {
  queryParams: GetFoodsSearchParams;
}

export const getFoodsSearchHandler = async (args: getFoodsSearchArgs) => {
  const res = await getFoodsSearch(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
 * @summary Returns a list of foods that matched search (query) keywords
 */

export type postFoodsSearchArgs = {
  bodyParams: FoodSearchCriteria;
}

export const postFoodsSearchHandler = async (args: postFoodsSearchArgs) => {
  const res = await postFoodsSearch(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
 * @summary Returns this documentation in JSON format
 */

export const getJsonSpecHandler = async () => {
  const res = await getJsonSpec();

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language)
 * @summary Returns this documentation in JSON format
 */

export const getYamlSpecHandler = async () => {
  const res = await getYamlSpec();

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
